﻿<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
<# var mimeTypes = GetMimeTypeList(); #>
using System;
using System.Collections.Generic;

namespace HeyRed.MimeGuesser
{
	// WARNING: This class auto generated by T4. DON'T modify manually.
    public static class ApacheMimeTypes
    {
		private static readonly string _defaultExtension = "bin";

		// http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types
		private static readonly Lazy<Dictionary<string, string>> _mimeTypeMap = new Lazy<Dictionary<string, string>>(
		() => new Dictionary<string, string>() {
		<# foreach (var t in mimeTypes) { #>
		{ "<#= t.Key #>", "<#= t.Value #>" },
		<# } #>
});
		
		public static string LookupExtension(string mime) {
			string extension;
			if (_mimeTypeMap.Value.TryGetValue(mime, out extension))
			{
				return extension;
			}
			return _defaultExtension;
		}
    }
}
<#+
    private static Dictionary<string, string> GetMimeTypeList()
    {
        using (var client = new WebClient())
        {
            var res = client.DownloadString(new Uri("http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types"));
            var tempDict = new Dictionary<string, string>();
            using (var reader = new StringReader(res))
            {
                string line;
                while ((line = reader.ReadLine()) != null)
                {
                    if (line.Trim().StartsWith("#")) continue;
					var parts = Regex.Split(line, @"\s+");
                    if (parts.Count() < 2) continue;
                    if (tempDict.ContainsKey(parts[0])) continue;
                    tempDict.Add(parts[0], parts[1]);
                }
            }
			return tempDict;
        }
    }
#>